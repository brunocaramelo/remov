- name: "Build Resolve Site App Server"
  hosts: "{{ target }}"
  become: true
  gather_facts: no
  tasks:

    # EPEL installing
    - name: Install Epel Release.
      raw: yum -y install epel-release yum-utils
      changed_when: False

    - name: Ensure a list of packages installed
      yum:
        name: "{{ packages }}"
      vars:
        packages:
          - mlocate
          - bash-completion
          - curl
          - git
          - gzip
          - unzip
          - wget
          - zip
          - nginx
          - php-cli
          - php-fpm
          - php-curl
          - php-dom
          - php-exif
          - php-fileinfo
          - php-ftp
          - php-gd
          - php-json
          - php-mbstring
          - php-mcrypt
          - php-mysql
          - php-mysqli
          - php-pdo
          - php-simplexml
          - php-xml
          - php-xmlrpc
          - php-xmlwriter
          - php-zip
          - php-fpm
          - php-bz2
          - php-igbinary
          - php-memcached
          - php-memcache
          - php-mysqlnd
          - php-mysqlnd
          - php-propro
          - php-soap
          - php-sqlite3
          - php-bcmath
        state: present
        update_cache: yes

    # COMPOSER
    # @ref https://github.com/Vinelab/ansible-composer/blob/master/tasks/main.yml
    - name: COMPOSER> download
      get_url:
        url: https://getcomposer.org/installer
        dest: /tmp/installer_composer
      tags: composer
    - name: COMPOSER> install
      shell: cat /tmp/installer_composer | php -- --install-dir=/usr/bin
      args:
        creates: /usr/bin/composer
      tags: composer
    - name: COMPOSER> rename composer.phar to composer
      shell: mv /usr/bin/composer.phar /usr/bin/composer
      args:
        creates: /usr/bin/composer
      tags: composer
    - name: COMPOSER> make composer executable
      file:
        path: /usr/bin/composer
        mode: a+x
        state: file
      tags: composer

    # PHP SEDS OF PHP INI
    - name: Alteracoes no PHP ini 
      shell: >
        sed -i "s/max_execution_time = 30/max_execution_time = 120/" /etc/php.ini && \
        sed -i "s/max_input_time = 60/max_input_time = 120/" /etc/php.ini && \
        sed -i "s/memory_limit = 128M/memory_limit = 2048M/" /etc/php.ini && \
        sed -i "s/post_max_size = 8M/post_max_size = 1024M/" /etc/php.ini && \
        sed -i "s/upload_max_filesize = 2M/upload_max_filesize = 1024M/" /etc/php.ini
     
    # NVM
    - name: NVM install
      shell: >
        if [ -d "/opt/nvm" ]; then \
          rm -rf /usr/bin/node /usr/bin/npm /opt/nvm ; \
        fi && \
        export NVM_DIR="/opt/nvm" && \
        mkdir -p /opt/nvm && \
        wget -O- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash && \
        [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" && \
        nvm install 16.15.0 && \
        nvm use 16.15.0 && \
        nvm alias 16.15.0 && \
        ln -s "/opt/nvm/versions/node/$(node -v)/bin/node" /usr/bin/node && \
        ln -s "/opt/nvm/versions/node/$(node -v)/bin/npm"  /usr/bin/npm 
      tags: node
    
    # SSL *.ftd.com.br
    - name: SSL> download ssl *.ftd.com.br
      get_url:
        url: https://s3-sa-east-1.amazonaws.com/redes.ftd/ssl/star_ftd_com_br.tar.gz
        dest: /etc/ssl/star_ftd_com_br.tar.gz
    - name: SSL> extract ssl certs to /etc/ssl
      unarchive:
        src: /etc/ssl/star_ftd_com_br.tar.gz
        dest: /etc/ssl
        remote_src: yes
    # Desliga o Selinux
    - name: Disable SELinux
      selinux: state=disabled
